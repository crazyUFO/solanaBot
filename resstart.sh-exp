#!/bin/bash
# 获取当前脚本所在目录
SCRIPT_DIR=$(cd "$(dirname "$0")" && pwd)

# 指定虚拟环境路径
VENV_DIR="$SCRIPT_DIR/venv"

# 指定要运行的 Python 脚本路径
PYTHON_SCRIPT="$SCRIPT_DIR/client_child.py"

# 获取 Git 仓库路径（假设当前脚本目录是 Git 仓库根目录）
REPO_DIR="$SCRIPT_DIR"

# 检查虚拟环境是否存在
if [ ! -d "$VENV_DIR" ]; then
    echo "虚拟环境未找到！请确保虚拟环境位于: $VENV_DIR"
    exit 1
fi

# 拉取最新代码
echo "拉取最新代码..."
cd "$REPO_DIR" || exit
git pull  # 假设你使用的分支是 main，如果不是请替换成你的分支名

# 检查脚本是否已在运行
RUNNING_PID=$(ps -ef | grep "[p]ython $PYTHON_SCRIPT" | awk '{print $2}')

if [ -n "$RUNNING_PID" ]; then
    echo "脚本已经在运行，进程 PID: $RUNNING_PID，正在杀死进程..."
    # 杀死当前运行的脚本进程
    kill -9 "$RUNNING_PID"
    if [ $? -eq 0 ]; then
        echo "脚本进程已被杀死，PID: $RUNNING_PID"
    else
        echo "无法杀死脚本进程: $RUNNING_PID"
        exit 1
    fi
fi

# 激活虚拟环境
echo "激活虚拟环境..."
source "$VENV_DIR/bin/activate"

# 运行 Python 脚本（后台运行，不输出日志文件）
echo "启动新的脚本进程..."
nohup python "$PYTHON_SCRIPT" > /dev/null 2>&1 &

# 获取后台进程的 PID
PID=$!

# 打印后台进程信息
echo "脚本已启动，进程 PID: $PID"
echo "可以使用 'tail -f logs/app.log' 来查看后台输出"

# 退出虚拟环境
deactivate

